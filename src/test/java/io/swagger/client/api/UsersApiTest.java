/*
 * Spotify
 * Simple API for advanced programming course, Dr. Mojtaba Vahidi Asl, Fall 1400 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: nima.heydari79@yahoo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.InlineResponse2004;
import io.swagger.client.model.InlineResponse2005;
import io.swagger.client.model.InlineResponse401;
import io.swagger.client.model.Playlists;
import io.swagger.client.model.PlaylistsBody;
import io.swagger.client.model.Tracks;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Add a track to a playlist
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTrackToPlaylistTest() throws ApiException {
        Integer playlistId = null;
        String trackId = null;
        InlineResponse2001 response = api.addTrackToPlaylist(playlistId, trackId);

        // TODO: test validations
    }
    /**
     * Create new playlist
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPlaylistTest() throws ApiException {
        PlaylistsBody body = null;
        InlineResponse2004 response = api.createPlaylist(body);

        // TODO: test validations
    }
    /**
     * Delete a playlist
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePlaylistTest() throws ApiException {
        Integer playlistId = null;
        InlineResponse2001 response = api.deletePlaylist(playlistId);

        // TODO: test validations
    }
    /**
     * Get playlists info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaylistsInfoTest() throws ApiException {
        Playlists response = api.getPlaylistsInfo();

        // TODO: test validations
    }
    /**
     * Get profile info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProfileInfoTest() throws ApiException {
        InlineResponse2003 response = api.getProfileInfo();

        // TODO: test validations
    }
    /**
     * Get tracks info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTracksInfoTest() throws ApiException {
        Tracks response = api.getTracksInfo();

        // TODO: test validations
    }
    /**
     * Remove a track from a playlist
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTrackFromPlaylistTest() throws ApiException {
        Integer playlistId = null;
        String trackId = null;
        InlineResponse2001 response = api.removeTrackFromPlaylist(playlistId, trackId);

        // TODO: test validations
    }
    /**
     * Upgrade to premium with a chance of 10%
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upgradeToPremiumTest() throws ApiException {
        InlineResponse2005 response = api.upgradeToPremium();

        // TODO: test validations
    }
    /**
     * Upgrade to premium with a chance of 100% (just for testing)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upgradeToPremiumTestTest() throws ApiException {
        InlineResponse2005 response = api.upgradeToPremiumTest();

        // TODO: test validations
    }
}
